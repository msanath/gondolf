package internal

import (
	"fmt"
	"os"
	"path/filepath"
)

const metadataProtoTemplate = `// Code generated by protoc-gen-go. DO NOT EDIT.

syntax = "proto3";

package proto.{{.ProtoPkgNamespace}}.core;

option go_package = "/api/{{.ProtoPkgNamespace}}pb";

// Message representing the Metadata of a resource.
message Metadata {
    // ID is the unique identifier of the resource.
    string id = 1;

    // Version is the version of the resource as it is known to the Ledger.
    uint64 version = 2;

    // IsDeleted indicates whether the resource has been soft-deleted.
    bool is_deleted = 3;
}
`

const protoMessageTemplate = `syntax = "proto3";

package proto.{{.ProtoPkgNamespace}}.ledger.{{.PackageName}};

// Import the Metadata from the core metadata.proto file
import "metadata.proto";

option go_package = "/api/{{.ProtoPkgNamespace}}pb";

// Enum to represent the {{.RecordName}}State
enum {{.RecordName}}State {
    {{.RecordName}}State_UNKNOWN = 0;
	{{.RecordName}}State_PENDING = 1;
    {{.RecordName}}State_ACTIVE = 2;
    {{.RecordName}}State_INACTIVE = 3;
}

// Message representing the {{.RecordName}}
message {{.RecordName}} {
    // Metadata is the metadata that identifies the {{.RecordName}}.
    core.Metadata metadata = 1;

    // Name is the name of the {{.RecordName}}.
    string name = 2;

    // Status represents the current status of the {{.RecordName}}.
    {{.RecordName}}Status status = 3;
}

// Message representing the Status of a resource.
message {{.RecordName}}Status {
    // State is the discrete condition of the resource.
    {{.RecordName}}State state = 1;

    // Message is a human-readable description of the resource's state.
    string message = 2;
}
`

const protoServiceTemplate = `syntax = "proto3";

package proto.{{.ProtoPkgNamespace}}.ledger.{{.PackageName}};

import "metadata.proto";
import "{{.PackageName}}.proto";

option go_package = "/api/{{.ProtoPkgNamespace}}pb";

// Service definition for managing {{.RecordName}} records.
service {{.RecordName}}s {
    // Create a new {{.RecordName}}.
    rpc Create(Create{{.RecordName}}Request) returns (Create{{.RecordName}}Response);

    // Get a {{.RecordName}} by its metadata.
    rpc GetByMetadata(Get{{.RecordName}}ByMetadataRequest) returns (Get{{.RecordName}}Response);

    // Get a {{.RecordName}} by its name.
    rpc GetByName(Get{{.RecordName}}ByNameRequest) returns (Get{{.RecordName}}Response);

    // Update the state of an existing {{.RecordName}}.
    rpc UpdateStatus(Update{{.RecordName}}StatusRequest) returns (Update{{.RecordName}}Response);

    // List {{.RecordName}}s that match the provided filters.
    rpc List(List{{.RecordName}}Request) returns (List{{.RecordName}}Response);

    // Delete a {{.RecordName}} by its metadata.
    rpc Delete(Delete{{.RecordName}}Request) returns (Delete{{.RecordName}}Response);
}

// Request to create a new {{.RecordName}}.
message Create{{.RecordName}}Request {
    string name = 1;
}

// Response after creating a new {{.RecordName}}.
message Create{{.RecordName}}Response {
    // The newly created {{.RecordName}} record.
    {{.RecordName}} record = 1;
}

// Request to update the state and message of a {{.RecordName}}.
message Update{{.RecordName}}StatusRequest {
    // The metadata of the {{.RecordName}} to update.
    core.Metadata metadata = 1;

    // The new state of the {{.RecordName}}.
    {{.RecordName}}Status status = 2;
}

// Response after updating the state of a {{.RecordName}}.
message Update{{.RecordName}}Response {
    // The updated {{.RecordName}} record.
    {{.RecordName}} record = 1;
}

message Get{{.RecordName}}ByMetadataRequest {
    core.Metadata metadata = 1;
}

// Request for getting a {{.RecordName}} by its name.
message Get{{.RecordName}}ByNameRequest {
    // The name of the {{.RecordName}} to get.
    string name = 1;
}

// Response after fetching a {{.RecordName}}.
message Get{{.RecordName}}Response {
    // The {{.RecordName}} record that was fetched.
    {{.RecordName}} record = 1;
}

// Request to list {{.RecordName}}s with specific filters.
message List{{.RecordName}}Request {
    // IN condition for filtering by IDs.
    repeated string id_in = 1;

    // IN condition for filtering by Names.
    repeated string name_in = 2;

    // Greater than or equal condition for filtering by version.
    uint64 version_gte = 3;

    // Less than or equal condition for filtering by version.
    uint64 version_lte = 4;

    // Equal condition for filtering by version.
    uint64 version_eq = 5;

    // IN condition for filtering by state.
    repeated {{.RecordName}}State state_in = 6;

    // NOT IN condition for filtering by state.
    repeated {{.RecordName}}State state_not_in = 7;

    // Whether to include soft-deleted resources in the query.
    bool include_deleted = 8;

    // Limit the number of results returned.
    uint32 limit = 9;
}

// Response for listing {{.RecordName}}s.
message List{{.RecordName}}Response {
    // The list of {{.RecordName}} records that match the query.
    repeated {{.RecordName}} records = 1;
}

// Request to delete a {{.RecordName}} by its metadata.
message Delete{{.RecordName}}Request {
    // The metadata of the {{.RecordName}} to delete.
    core.Metadata metadata = 1;
}

// Response after deleting a {{.RecordName}}.
message Delete{{.RecordName}}Response {}
`

func (o GenerateOptions) generateProto() error {
	fmt.Println("Generating proto components")

	apiProtoPath := filepath.Join(o.DestinationPath, "api")
	// Create destination path if it doesn't exist
	err := os.MkdirAll(apiProtoPath, 0755)
	if err != nil {
		return fmt.Errorf("failed to create api path: %w", err)
	}

	fileName := "metadata.proto"
	// Generate the test file
	metadataProfoFilePath := filepath.Join(apiProtoPath, "metadata.proto")
	if _, err := os.Stat(metadataProfoFilePath); err == nil {
		fmt.Println("... existing metadata.proto found. Skipping")
	} else {
		fmt.Println("... creating ", fileName)
		err = executeTemplate("metadataProtoTemplate", metadataProtoTemplate, apiProtoPath, fileName, o)
		if err != nil {
			return fmt.Errorf("failed to generate record file: %w", err)
		}
	}

	fileName = fmt.Sprintf("%s.proto", o.PackageName)
	fmt.Println("... creating ", fileName)
	err = executeTemplate("protoMessageTemplate", protoMessageTemplate, apiProtoPath, fileName, o)
	if err != nil {
		return fmt.Errorf("failed to generate record file: %w", err)
	}

	fileName = fmt.Sprintf("%s_service.proto", o.PackageName)
	fmt.Println("... creating ", fileName)
	err = executeTemplate("protoServiceTemplate", protoServiceTemplate, apiProtoPath, fileName, o)
	if err != nil {
		return fmt.Errorf("failed to generate record file: %w", err)
	}

	return nil
}
