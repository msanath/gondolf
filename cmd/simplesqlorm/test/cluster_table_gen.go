// Code generated by github.com/msanath/gondolf/simplesqlorm. DO NOT EDIT.

package test

import (
	"context"

	"github.com/jmoiron/sqlx"
	"github.com/msanath/gondolf/pkg/simplesql"
)

const clusterTableName = "cluster"

type ClusterTableGetKeys struct {
	ID        *string `db:"id"`
	DeletedAt int64   `db:"deleted_at"`
	Name      *string `db:"name"`
}

type ClusterTableUpdateKey struct {
	ID               string `db:"id"`
	Version          uint64 `db:"version"`
	DeletedAt        int64  `db:"deleted_at"`
	ClusterManagerID string `db:"cluster_manager_id"`
}

type ClusterTableUpdateFields struct {
	LastUpdatedAt *int64  `db:"last_updated_at"`
	DeletedAt     *int64  `db:"deleted_at"`
	State         *string `db:"state"`
	Message       *string `db:"message"`
}

type ClusterTableSelectFilters struct {
	IDIn               []string `db:"id:in"`
	VersionGte         *uint64  `db:"version:gte"`
	VersionLte         *uint64  `db:"version:lte"`
	VersionEq          *uint64  `db:"version:eq"`
	DeletedAtEq        *int64   `db:"deleted_at:eq"`
	NameIn             []string `db:"name:in"`
	ClusterManagerIDIn []string `db:"cluster_manager_id:in"`
	StateIn            []string `db:"state:in"`
	StateNotIn         []string `db:"state:not_in"`
	Limit              uint32   `db:"limit"`
}

type ClusterTable struct {
	simplesql.Database
	tableName string
}

func NewClusterTable(db simplesql.Database) *ClusterTable {
	return &ClusterTable{
		Database:  db,
		tableName: clusterTableName,
	}
}

func (s *ClusterTable) Insert(ctx context.Context, execer sqlx.ExecerContext, row ClusterRow) error {
	return s.Database.Insert(ctx, execer, s.tableName, row)
}

func (s *ClusterTable) Get(ctx context.Context, keys ClusterTableGetKeys) (ClusterRow, error) {
	var row ClusterRow
	err := s.Database.Get(ctx, s.tableName, keys, &row)
	if err != nil {
		return ClusterRow{}, err
	}
	return row, nil
}

func (s *ClusterTable) Update(
	ctx context.Context, execer sqlx.ExecerContext, updateKey ClusterTableUpdateKey, updateFields ClusterTableUpdateFields,
) error {
	return s.Database.Update(ctx, execer, s.tableName, updateKey, updateFields)
}

func (s *ClusterTable) Delete(ctx context.Context, execer sqlx.ExecerContext, updateKey ClusterTableUpdateKey) error {
	return s.Database.Delete(ctx, s.tableName, updateKey)
}

func (s *ClusterTable) List(ctx context.Context, filters ClusterTableSelectFilters) ([]ClusterRow, error) {
	var rows []ClusterRow
	err := s.Database.List(ctx, s.tableName, filters, &rows)
	if err != nil {
		return nil, err
	}
	return rows, nil
}
