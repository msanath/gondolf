// Code generated by github.com/msanath/gondolf/simplesqlorm. DO NOT EDIT.

package test

import (
	"context"

	"github.com/jmoiron/sqlx"
	"github.com/msanath/gondolf/pkg/simplesql"
)

const nodeTableName = "node"

type NodeTableGetKeys struct {
	ID *string `db:"id"`
}

type NodeTableUpdateKey struct {
	ID string `db:"id"`
}

type NodeTableUpdateFields struct {
	Name *string `db:"name"`
}

type NodeTableSelectFilters struct {
	IDIn   []string `db:"id:in"`
	NameIn []string `db:"name:in"`
	Limit  uint32   `db:"limit"`
}

type NodeTable struct {
	simplesql.Database
	tableName string
}

func NewNodeTable(db simplesql.Database) *NodeTable {
	return &NodeTable{
		Database:  db,
		tableName: nodeTableName,
	}
}

func (s *NodeTable) Insert(ctx context.Context, execer sqlx.ExecerContext, row NodeRow) error {
	return s.Database.Insert(ctx, execer, s.tableName, row)
}

func (s *NodeTable) Get(ctx context.Context, keys NodeTableGetKeys) (NodeRow, error) {
	var row NodeRow
	err := s.Database.Get(ctx, s.tableName, keys, &row)
	if err != nil {
		return NodeRow{}, err
	}
	return row, nil
}

func (s *NodeTable) Update(
	ctx context.Context, execer sqlx.ExecerContext, updateKey NodeTableUpdateKey, updateFields NodeTableUpdateFields,
) error {
	return s.Database.Update(ctx, execer, s.tableName, updateKey, updateFields)
}

func (s *NodeTable) Delete(ctx context.Context, execer sqlx.ExecerContext, updateKey NodeTableUpdateKey) error {
	return s.Database.Delete(ctx, s.tableName, updateKey)
}

func (s *NodeTable) List(ctx context.Context, filters NodeTableSelectFilters) ([]NodeRow, error) {
	var rows []NodeRow
	err := s.Database.List(ctx, s.tableName, filters, &rows)
	if err != nil {
		return nil, err
	}
	return rows, nil
}
